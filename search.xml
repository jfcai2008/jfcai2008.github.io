<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Angular通用开发模板</title>
    <url>/2021/01/31/Angular%E9%80%9A%E7%94%A8%E5%BC%80%E5%8F%91%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="AngularGeneral"><a href="#AngularGeneral" class="headerlink" title="AngularGeneral"></a>AngularGeneral</h1><p>想做一个比较通用的angular应用模板？<br>为自己的以后项目做一个框架。<br>暂时有如下特性：</p>
<h2 id="一、多路由"><a href="#一、多路由" class="headerlink" title="一、多路由"></a>一、多路由</h2><p>应用中各个不同的业务功能可以有自己不同的布局模板。  </p>
<ol>
<li>登录，错误处理有着自己的路由，自己的布局。  </li>
<li>例子中的基金有自己的路由，自己的布局模板。  </li>
<li>例子中的足球有自己的路由和自己的布局模板。<br>等等。</li>
</ol>
<h2 id="二、实现了懒加载"><a href="#二、实现了懒加载" class="headerlink" title="二、实现了懒加载"></a>二、实现了懒加载</h2><p>基于业务功能的子路由实现了懒加载<br>懒加载的路由也能动态加入到菜单中。（见后面的实现方法）  </p>
<h2 id="三、基于业务功能创建模块"><a href="#三、基于业务功能创建模块" class="headerlink" title="三、基于业务功能创建模块"></a>三、基于业务功能创建模块</h2><p>假如我们的项目中包括订单，用户，商品，足球，基金<br>基于业务功能创建模块，  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng g m soccer --routing  </span><br><span class="line">ng g m fund --routing  </span><br><span class="line">ng g m user --routing  </span><br><span class="line">ng g m order --routing  </span><br></pre></td></tr></table></figure>
<p>–routing //表示创建的模块带路由，用于懒加载  </p>
<p>创建结束之后<br>我们在app目录下就可以发现如下目录<br>soccer<br>user<br>order<br>fund<br>…<br>等目录<br>现在假设我的足球模块中包括页面联赛，球队，分析等页面,我们可以如下创建页面组件  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng g c soccer&#x2F;leagues  </span><br><span class="line">ng g c soccer&#x2F;teams  </span><br><span class="line">ng g c soccer&#x2F;analysis  </span><br></pre></td></tr></table></figure>
<p>创建结束之后<br>我们在soccer目录下就可以发现如下目录<br>leagues<br>teams<br>analysis<br>…<br>等目录，每个目录都包括该页面所需要的一系列文件。  </p>
<h2 id="四、多级路由生成"><a href="#四、多级路由生成" class="headerlink" title="四、多级路由生成"></a>四、多级路由生成</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng g c soccerLayout --module&#x3D;app.module  </span><br></pre></td></tr></table></figure>
<p>如上生成基于业务功能应用的布局组件。<br>注意，所有的布局组件都应加入到app.module.ts模块中。  </p>
<p>修改根下的app.component.ts仅保留</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-outlet&gt;&lt;&#x2F;router-outlet&gt;</span><br></pre></td></tr></table></figure>
<p>部分。  </p>
<p>即直接展示子路由组件内容。如登录页等。 </p>
<p>例如：根路由文件下的如下路由部分  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    path: &#39;login&#39;,  </span><br><span class="line">    pathMatch: &#39;full&#39;,  </span><br><span class="line">    component:LoginComponent,  </span><br><span class="line">    data: &#123;  </span><br><span class="line">        breadcrumb: &#39;登录&#39;,  </span><br><span class="line">        visible: false  </span><br><span class="line">    &#125;,  </span><br><span class="line">&#125;,  </span><br></pre></td></tr></table></figure>
<p>将使用根组件。  </p>
<p>而路由中的如下部分  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    path: &#39;soccer&#39;,  </span><br><span class="line">    component:LayoutsoccerComponent,  </span><br><span class="line">    loadChildren: () &#x3D;&gt; import(&#39;.&#x2F;soccer&#x2F;soccer.module&#39;).then(m &#x3D;&gt; m.SoccerModule),  </span><br><span class="line">    data: &#123;  </span><br><span class="line">        breadcrumb: &#39;足球&#39;,  </span><br><span class="line">        visible: true,  </span><br><span class="line">        menus: SoccerRoutes  </span><br><span class="line">    &#125;,  </span><br><span class="line">    canActivate: [AuthGuard]  </span><br><span class="line">&#125;,  </span><br></pre></td></tr></table></figure>
<p>将使用LayoutsoccerComponent组件作为布局组件。  </p>
<h2 id="五、合作开发备注"><a href="#五、合作开发备注" class="headerlink" title="五、合作开发备注"></a>五、合作开发备注</h2><ol>
<li>每成员可基于【三、基于业务功能创建模块】创建自己的模块和页面和组件。  </li>
<li>将该业务功能模块中路由文件中的（已完成路由数组内容提取出来）生成一个***.menu.ts文件。  \<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    path: &#39;tables&#39;,  </span><br><span class="line">    component: TablesComponent,  </span><br><span class="line">    data: &#123;  </span><br><span class="line">        breadcrumb: &#39;台帐管理&#39;,  </span><br><span class="line">        visible: true  </span><br><span class="line">    &#125;,  </span><br><span class="line">    &#x2F;&#x2F; canActivate: [AuthGuard]  </span><br><span class="line">&#125;,  </span><br><span class="line">&#123;  </span><br><span class="line">    path: &#39;laws&#39;,  </span><br><span class="line">    component: LawsComponent,  </span><br><span class="line">    data: &#123;  </span><br><span class="line">        breadcrumb: &#39;法律法规&#39;,  </span><br><span class="line">        visible: true  </span><br><span class="line">    &#125;,  </span><br><span class="line">    &#x2F;&#x2F; canActivate: [AuthGuard]  </span><br><span class="line">&#125;,  </span><br></pre></td></tr></table></figure></li>
<li>将**<em>.menu.ts引入到**</em>.routing.ts文件中，并并入到routes变量，完成本模块的路由文件修改。  </li>
</ol>
<h2 id="六、路由合并"><a href="#六、路由合并" class="headerlink" title="六、路由合并"></a>六、路由合并</h2><p>新建一个根下的app.menu.ts文件。<br>完成总菜单文件，其中可根据业务功能并入子菜单文件。如果业务功能子菜单要采用不同的<br>模板，请在此处指定。如  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; LayoutComponent &#125; from &#39;.&#x2F;pages&#x2F;layout&#x2F;layout.component&#39;;  </span><br><span class="line">import &#123; LayoutsoccerComponent &#125; from &#39;.&#x2F;pages&#x2F;layoutsoccer&#x2F;layoutsoccer.component&#39;;  </span><br><span class="line">  </span><br><span class="line">...  </span><br><span class="line">    &#123;  </span><br><span class="line">        path: &#39;fund&#39;,  </span><br><span class="line">        component:LayoutComponent,  </span><br><span class="line">        loadChildren: () &#x3D;&gt; import(&#39;.&#x2F;fund&#x2F;fund.module&#39;).then(m &#x3D;&gt; m.FundModule),  </span><br><span class="line">        data: &#123;  </span><br><span class="line">            breadcrumb: &#39;基金&#39;,  </span><br><span class="line">            visible: true,  </span><br><span class="line">            menus: FundRoutes  </span><br><span class="line">        &#125;,  </span><br><span class="line">        canActivate: [AuthGuard]  </span><br><span class="line">    &#125;,  </span><br><span class="line">    &#123;  </span><br><span class="line">        path: &#39;soccer&#39;,  </span><br><span class="line">        component:LayoutsoccerComponent,  </span><br><span class="line">        loadChildren: () &#x3D;&gt; import(&#39;.&#x2F;soccer&#x2F;soccer.module&#39;).then(m &#x3D;&gt; m.SoccerModule),  </span><br><span class="line">        data: &#123;  </span><br><span class="line">            breadcrumb: &#39;足球&#39;,  </span><br><span class="line">            visible: true,  </span><br><span class="line">            menus: SoccerRoutes  </span><br><span class="line">        &#125;,  </span><br><span class="line">        canActivate: [AuthGuard]  </span><br><span class="line">    &#125;,  </span><br><span class="line">    ...  </span><br></pre></td></tr></table></figure>
<p>最后将此app.menu.ts内容并入到根路由中  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; MainRoutes &#125; from &#39;.&#x2F;app.menu&#39;  </span><br><span class="line"></span><br><span class="line">const routes: Routes &#x3D; [  </span><br><span class="line">  ...MainRoutes  </span><br><span class="line"> ];  </span><br></pre></td></tr></table></figure>
<p>如果有样式文件加入，直接在styles.scss中import即可。<br>发现，我的知识库中用到了组件NzTabsModule<br>则必须在knowleges.module.ts中imports,在app.module.ts中imports无效。  </p>
<h4 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h4><p><img src="https://jfcai2008.github.io/images/imgs/login.png" alt="avatar">  </p>
<h4 id="布局1"><a href="#布局1" class="headerlink" title="布局1"></a>布局1</h4><p><img src="https://jfcai2008.github.io/images/imgs/home1.png" alt="avatar">  </p>
<h4 id="布局2"><a href="#布局2" class="headerlink" title="布局2"></a>布局2</h4><p><img src="https://jfcai2008.github.io/images/imgs/home2.png" alt="avatar">  </p>
<h4 id="布局3"><a href="#布局3" class="headerlink" title="布局3"></a>布局3</h4><p><img src="https://jfcai2008.github.io/images/imgs/home3.png" alt="avatar"></p>
<h2 id="七、路由守卫"><a href="#七、路由守卫" class="headerlink" title="七、路由守卫"></a>七、路由守卫</h2><p>参考：<a href="https://www.cnblogs.com/huangenai/p/12191832.html">https://www.cnblogs.com/huangenai/p/12191832.html</a>  </p>
<p>代码地址：<a href="https://github.com/jfcai2008/angular-general">https://github.com/jfcai2008/angular-general</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建记录</title>
    <url>/2021/01/31/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>抄自：<a href="https://huangmb.github.io/2019/05/26/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/">https://huangmb.github.io/2019/05/26/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</a>  </p>
<h1 id="日常操作："><a href="#日常操作：" class="headerlink" title="日常操作："></a>日常操作：</h1><p>发布文章流程<br>1.hexo new post ‘****’<br>2.使用工具编辑上面命令在_post目录下生成的对应md文件.<br>3.hexo g  //生成<br>4.hexo d  //部署  </p>
<h1 id="Hexo博客搭建记录"><a href="#Hexo博客搭建记录" class="headerlink" title="Hexo博客搭建记录"></a>Hexo博客搭建记录</h1><h2 id="Hexo和GitHub-Page"><a href="#Hexo和GitHub-Page" class="headerlink" title="Hexo和GitHub Page"></a>Hexo和GitHub Page</h2><p>Hexo是一个流行的静态博客系统，GitHub Page是GitHub提供的静态页面托管服务，使用Hexo + GitHub Page的组合是个不错的个人博客尤其是技术博客的搭建方案。<br>我个人认为有以下优点：</p>
<pre><code>GitHub在圈内认同度很高，在Google搜索的权重也非常高；
提供了GitHub的二级域名https://&#123;username&#125;.github.io，可以省去申请域名、备案、维护vps、申请https证书等等一系列烦恼；
Hexo默认使用Markdown进行创作，对于涉及代码的技术博客排版友好；
Hexo拥有丰富的主题和插件，可定制性强，相比简书、掘金等博客网站，更容易做出一个个性有范的博客；
可以方便的使用git进行版本控制；
</code></pre>
<p>缺点也是有的，Page毕竟是个静态托管服务，所以我们无法使用动态语言如Java、PHP等实现复杂功能；GitHub搭建的博客访问速度较慢，但是，翻Q是每个技术人必备的技能。</p>
<p>WordPress也是一个不错的博客系统，不过他是使用php动态语言，GitHub Page不支持，所以，这里也先不讨论WordPress了。</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo是一个Node.Js项目，等下要把静态博客推到GitHub上部署，所以确保电脑已经装了Node.Js、Git环境。<br>环境准备完毕，直接使用下面的命令安装hexo即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装成功后，新建一个空文件夹作为博客根目录，在该目录下执行hexo init命令进行初始化，一个专属博客就创建好了。</p>
<p>使用命令hexo s运行项目，就可以通过localhost:4000访问我们的博客网站，默认创建了一篇”hello world”的博客。</p>
<p>现在，我们要把它部署到GitHub Page上。</p>
<h2 id="新建GitHub-Page仓库"><a href="#新建GitHub-Page仓库" class="headerlink" title="新建GitHub Page仓库"></a>新建GitHub Page仓库</h2><p>关于GitHub Page的介绍，可以看看官方文档。<br>使用GitHub Page非常简单，只要在你的GitHub上建立一个名为{username}.github.io的空仓库，其中username是你的GitHub用户名，等下我们博客的访问路径也是{username}.github.io。</p>
<p>仓库中不需要存放文件，因为等下Hexo会通过Git部署插件自动把编译生成的静态博客推到这个仓库。</p>
<h2 id="配置Git部署插件"><a href="#配置Git部署插件" class="headerlink" title="配置Git部署插件"></a>配置Git部署插件</h2><p>首先，安装这个插件，在博客根目录下执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后在根目录下的_config.yml文件夹下配置我们我们刚才创建的GitHub仓库。<br>比如我的是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:huangmb&#x2F;huangmb.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>这里的repo是仓库的clone地址，ssh格式而不是https，因为这里没有配置你的git账户信息。</p>
<p>然后执行hexo g -d命令即可发布文章到GitHub上，每次更新文章或者配置后，都可以用这个任务发布，然后在你的博客网站上立刻就能看到最新效果。</p>
<p>如果发布太频繁，可能对SEO不友好，或者容易产生浏览器缓存，如果发现网站没有更新不妨试试清理缓存或者强制刷新。</p>
<a id="more"></a>
<h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><p>为了方便Git部署插件，我们选择ssh的仓库地址，而不是https的仓库url。<br>如果你曾经clone和push过自己GitHub名下的仓库，已经保存了GitHub账户信息也可以直接使用https的clone url，可以跳过这个步骤。</p>
<p>打开上面创建的仓库，点击clone or download按钮查看clone地址。<br><img src="https://jfcai2008.github.io/images/clone.png" alt="avatar"><br>如果你们配置过ssh，就会上面上面以”<a href="mailto:&#103;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;">&#103;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;</a>“开头的url，直接使用这个url即可。<br>否则会出现个选项配置ssh，其实就是这个路径<a href="https://github.com/settings/ssh/new">https://github.com/settings/ssh/new</a><br><img src="https://jfcai2008.github.io/images/ssh.png" alt="avatar"><br>到电脑的用户目录下，查看隐藏文件夹.ssh/id_rsa.pub文件，将里面的内容拷贝到上面的Key输入框内，Title随便写。<br>如果找不到.ssh文件夹或者文件夹下不存在id_rsa.pub文件，则是还未创建ssh公钥，关于git ssh可以参考这篇文章 服务器上的 Git - 生成 SSH 公钥</p>
<p>添加回到仓库中就能看到ssh的clone地址，填到hexo git插件配置文件中。</p>
<h2 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h2><p>官网地址：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>默认的landspape我感觉不好看，好在Hexo有丰富的主题可选，这里我选了比较热门的NexT主题。<br>就是你们看到的现在这个样子，使用的是NexT主题的Pisces模式，长这个样子。<br><img src="https://jfcai2008.github.io/images/home.png" alt="avatar"></p>
<h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>Hexo的主题安装其实就是把主题包放在在themes文件夹下，每个主题一个文件夹。<br>所以，安装NexT主题，你可以直接把<a href="https://github.com/theme-next/hexo-theme-next%E4%B8%8B%E8%BD%BD%E4%B8%8B%E6%9D%A5%E6%94%BE%E5%9C%A8themes%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E3%80%82">https://github.com/theme-next/hexo-theme-next下载下来放在themes文件夹下。</a><br>这里选择另外一种更好的方式，将NexT仓库使用Git clone到themes文件夹下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>这样，当Next更新之后，只要使用git pull即可完成更新。</p>
<h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>打开根目录下的_config.yml配置文件，找到theme字段，改为theme: next。<br>重启博客服务，现在主题已经切换到NexT上了。<br>NexT内置了Muse、Mist、Pisces、Gemini四种风格，可以在Next的配置文件/themes/next/_config.xml中找到下面的配置，注释其中一个验证一下效果。修改NexT配置可不需要重启即可看到效果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#scheme: Muse  </span><br><span class="line">#scheme: Mist  </span><br><span class="line">scheme: Pisces  </span><br><span class="line">#scheme: Gemini  </span><br></pre></td></tr></table></figure>
<p>下面介绍Hexo可能会定制的地方。后面Hexo的配置文件均是指根目录下的_config.yml，NexT的配置文件均是指/themes/next/_config.xml文件。</p>
<h2 id="配置网站基本信息"><a href="#配置网站基本信息" class="headerlink" title="配置网站基本信息"></a>配置网站基本信息</h2><p>在Hexo的配置文件中，找到下面的site模块进行修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Site  </span><br><span class="line">title: Bob Huang&#39;s Blog  </span><br><span class="line">subtitle: 很酷的Android工程师  </span><br><span class="line">description: 没事瞎写  </span><br><span class="line">keywords: Android,Kotlin,React Native,Spring MVC,NodeJs  </span><br><span class="line">author: Bob Huang  </span><br><span class="line">language: zh-CN  </span><br><span class="line">timezone: asia&#x2F;shanghai  </span><br></pre></td></tr></table></figure>
<p>因为要部署到GitHub上，这里记得把时区手动指定东八区。</p>
<h2 id="配置头像"><a href="#配置头像" class="headerlink" title="配置头像"></a>配置头像</h2><p>在NexT的配置文件，找到下面的代码，把头像放到images文件夹下，通过url字段配置；rounded字段可以配置圆角。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Sidebar Avatar  </span><br><span class="line">avatar:  </span><br><span class="line">  url: &#x2F;images&#x2F;avatar.png  </span><br><span class="line">  rounded: true  </span><br></pre></td></tr></table></figure>
<h2 id="配置菜单"><a href="#配置菜单" class="headerlink" title="配置菜单"></a>配置菜单</h2><p>默认的菜单只有”首页”和”归档”，我们可以在NexT的配置文件中找到menu模块。<br>添加菜单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:  </span><br><span class="line">  home: &#x2F; || home  </span><br><span class="line">  #about: &#x2F;about&#x2F; || user  </span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags  </span><br><span class="line">  categories: &#x2F;categories&#x2F; || th  </span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive  </span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || calendar  </span><br><span class="line">  about: &#x2F;about&#x2F; || user  </span><br><span class="line">  #sitemap: &#x2F;sitemap.xml || sitemap  </span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || heartbeat  </span><br></pre></td></tr></table></figure>
<p>可以把预置的一些菜单去除注释，比如常用的分类和标签；也可以自己添加其他菜单，比如这里加的关于菜单。<br>菜单的格式如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name: path || icon</span><br></pre></td></tr></table></figure>
<p>前面是菜单的名称，中间的对应的链接路径，||后面是图标的名字，可以去fontawesome.com上找合适的图标或者看看博客内其他地方在用的图标。</p>
<p>可能你会发现标签和分类两个菜单跳转会404，那是因为还没有创建标签和菜单。</p>
<h2 id="新建标签"><a href="#新建标签" class="headerlink" title="新建标签"></a>新建标签</h2><p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>
<p>会生成一个source/tags/index.md文件，将其改为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2019-05-26 17:20:25</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h2 id="新建分类"><a href="#新建分类" class="headerlink" title="新建分类"></a>新建分类</h2><p>和标签类似，执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>
<p>然后source/categories/index.md文件改成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2019-05-26 17:07:32</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>现在标签和菜单不会404了。<br>配置GitHub等社交信息</p>
<p>GitHub有两处地方可以配置，其一是博客右上角的<br>GitHub<br>这是在NexT配置文件的这部分进行修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github_banner:</span><br><span class="line">  enable: true</span><br><span class="line">  permalink: https:&#x2F;&#x2F;github.com&#x2F;huangmb</span><br><span class="line">  title: Follow me on GitHub</span><br></pre></td></tr></table></figure>
<p>另一个地方是左下角社交展示区域，可以添加GitHub以及邮箱等其他信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;huangmb || github</span><br><span class="line">  E-Mail: mailto:286931810@qq.com || envelope</span><br><span class="line">  #Weibo: https:&#x2F;&#x2F;weibo.com&#x2F;yourname || weibo</span><br><span class="line">  #Google: https:&#x2F;&#x2F;plus.google.com&#x2F;yourname || google</span><br><span class="line">  #Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;yourname || twitter</span><br></pre></td></tr></table></figure>
<h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><p>虽然是静态博客网站，Hexo也集成了一个本地搜索功能。<br>使用下面的命令安装搜索模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>然后在Next的配置文件找到local_search的配置项，将enable改为true即可，你会看到菜单中多了一项搜索。</p>
<h2 id="开始创作"><a href="#开始创作" class="headerlink" title="开始创作"></a>开始创作</h2><p>完事具备，可以开始写作了。在Hexo中，文章是以Markdown方式保存的，所有文章都保存在source/_posts下</p>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>使用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;标题&quot;</span><br></pre></td></tr></table></figure>
<p>即可在_posts文件夹下生成对应的Markdown文件。<br>你可以手动新建Markdown文件，并在文件头部加上博客的声明（称为Front Matter），比如现在这篇文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo博客搭建记录</span><br><span class="line">date: 2019-05-26 16:59:36</span><br><span class="line">categories:</span><br><span class="line">- hexo</span><br><span class="line">tags:</span><br><span class="line">- hexo</span><br><span class="line">- 记录</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h3 id="使用分类和标签"><a href="#使用分类和标签" class="headerlink" title="使用分类和标签"></a>使用分类和标签</h3><p>正如上面的文件头声明，分类和标签仅需要加上categories和tags字段，标签可以声明多个，而分类声明多个是多级分类的意思，而不是多个分类。</p>
<h3 id="创建时间和更新时间"><a href="#创建时间和更新时间" class="headerlink" title="创建时间和更新时间"></a>创建时间和更新时间</h3><p>在文件头声明date和updated</p>
<p>更多可以使用的属性见front-matter</p>
<h3 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h3><p>在NexT的配置文件中，找到creative_commons模块，将enable改为true即可。</p>
<h3 id="使用评论"><a href="#使用评论" class="headerlink" title="使用评论"></a>使用评论</h3><p>本站使用的是Valine作为评论系统，好处是可以匿名评论，支持表情和Markdown。<br>具体安装参考这篇文章。</p>
<h3 id="使用赞赏"><a href="#使用赞赏" class="headerlink" title="使用赞赏"></a>使用赞赏</h3><p>在NexT的配置文件中找到reward_settings模块，将enable改为true，并在下面的reward中的支付宝和微信注释去掉，并改成你的支付宝和微信收款码图片文件名。<br>将微信和支付宝的收款码放在source/images文件夹下。</p>
<h3 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h3><p>字数统计</p>
<p>在NexT的配置文件中，找到symbols_count_time，将各属性改为true即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: mins.</span><br></pre></td></tr></table></figure>
<h3 id="访客量和访问量"><a href="#访客量和访问量" class="headerlink" title="访客量和访问量"></a>访客量和访问量</h3><p>可以使用busuanzi统计，在NexT的配置文件中找到busuanzi_count并将enable改为true，则在网页底部会有访客统计数据。</p>
<p>如果需要修改显示的样式，比如加上标题，可以修改Next下的layout/_third_party/analytics/busuanzi-counter.swig模版。</p>
<h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><p>前往官网添加一个网站，然后在代码获取下将hm.js后面的xxxx就是你的id拷贝下来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var hm &#x3D; document.createElement(&quot;script&quot;);</span><br><span class="line"> hm.src &#x3D; &quot;https:&#x2F;&#x2F;hm.baidu.com&#x2F;hm.js?xxxx&quot;;</span><br><span class="line"> var s &#x3D; document.getElementsByTagName(&quot;script&quot;)[0];</span><br></pre></td></tr></table></figure>
<p>在NexT的配置文件中找到baidu_analytics，将注释去掉，值为刚才拷贝的ID。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g # 生成</span><br><span class="line">hexo s # 启动服务</span><br></pre></td></tr></table></figure>
<p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的。<br>如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。</p>
<h3 id="如何让博文列表不显示全部内容"><a href="#如何让博文列表不显示全部内容" class="headerlink" title="如何让博文列表不显示全部内容"></a>如何让博文列表不显示全部内容</h3><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p>
<p>答案是在合适的位置加上<!--more-->即可</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>pictures</title>
    <url>/2021/01/31/pictures/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
